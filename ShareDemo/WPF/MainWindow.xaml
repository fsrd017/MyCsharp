<Window x:Class="WPF.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPF"
        xmlns:vm="clr-namespace:WPF.ViewModel"
        xmlns:model="clr-namespace:WPF.Model"
        xmlns:localui="clr-namespace:WPF.UserControlTemplate"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:routeevt="clr-namespace:WPF.EventRoute"
        mc:Ignorable="d"
        routeevt:ButtonTime.ReportTime="RptTime2"
    Title="MainWindow" Height="900" Width="1500" WindowStartupLocation="CenterScreen" x:Name="Main_Window">

    <!-- 注意，在这个位置写RptTime的话，则说明窗口中的任何一个控件都能够获取到那个Button发出的路由事件 -->

    <Window.Resources>

        <!-- 控件模板，可以自由进行组合 -->
        <ControlTemplate x:Key="cTmp">
            <StackPanel>
                <TextBox x:Name="textBox1" Margin="6"/>
                <TextBox x:Name="textBox2" Margin="6,0"/>
                <TextBox x:Name="textBox3" Margin="6"/>
            </StackPanel>
        </ControlTemplate>

        <!-- 一个在XAML当中用到的string实例 -->
        <sys:String x:Key="StaticStringResource">关联静态资源以及圆角Style</sys:String>

        <!-- 后边树形结构用到的数据 -->
        <XmlDataProvider x:Key="xdp" XPath="FileSystem/Folder">
            <x:XData>
                <FileSystem xmlns="">
                    <Folder Name="Books">
                        <Folder Name="Programming">
                            <Folder Name="Windows">
                                <Folder Name="WPF"/>
                                <Folder Name="MFC"/>
                                <Folder Name="Delphi"/>
                            </Folder>
                        </Folder>
                        <Folder Name="Tools">
                            <Folder Name="Development"/>
                            <Folder Name="Designment"/>
                            <Folder Name="Players"/>
                        </Folder>
                    </Folder>
                </FileSystem>
            </x:XData>
        </XmlDataProvider>

        <SolidColorBrush x:Key="ProgressBar.Progress" Color="#FFFFB025"/>
        <SolidColorBrush x:Key="ProgressBar.Background" Color="#FFE6E6E6"/>
        <SolidColorBrush x:Key="ProgressBar.Border" Color="#FFBCBCBC"/>
        <Style x:Key="ProgressBarStyle1" TargetType="{x:Type ProgressBar}">
            <Setter Property="Foreground" Value="{StaticResource ProgressBar.Progress}"/>
            <Setter Property="Background" Value="{StaticResource ProgressBar.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ProgressBar}">
                        <Grid x:Name="TemplateRoot">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Determinate"/>
                                    <VisualState x:Name="Indeterminate">
                                        <Storyboard RepeatBehavior="Forever">
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                            </DoubleAnimationUsingKeyFrames>
                                            <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                                                <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                                <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                                <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                            </PointAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                            <Rectangle x:Name="PART_Track"/>
                            <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                                <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}"/>
                                <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
                                    <Rectangle.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                            </Grid>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Orientation" Value="Vertical">
                                <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsIndeterminate" Value="true">
                                <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Window.Resources>

    <Grid>
        <TabControl>
            
            <!-- 主要用来展示WPF的基础知识 -->
            <TabItem Header="前端\路由事件\依赖属性\命令">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="300"></ColumnDefinition>  <!--第一列：WPF基础知识-->
                        <ColumnDefinition Width="300"></ColumnDefinition>  <!--第二列：WPF高级知识，路由事件\依赖属性\命令-->
                        <ColumnDefinition Width="300"></ColumnDefinition>  <!--第三列：WPF如何解耦和前后端代码-->
                    </Grid.ColumnDefinitions>

                    <!-- WPF的纯前端交互处理 -->
                    <DockPanel Grid.Column="0" Margin="10,0,10,0" x:Name="None_RouteEvent_DockPanel" routeevt:ButtonTime.ReportTime="RptTime">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="100"></RowDefinition>
                                <RowDefinition Height="150"></RowDefinition>
                                <RowDefinition Height="120"></RowDefinition>
                                <RowDefinition Height="100"></RowDefinition>
                                <RowDefinition Height="100"></RowDefinition>
                                <RowDefinition Height="100"></RowDefinition>
                            </Grid.RowDefinitions>

                            <!-- 使用Style对控件进行定制化，即所谓的CSS和Javascript -->
                            <Border Grid.Row="0" BorderBrush="Black" BorderThickness="1">
                                <StackPanel  Margin="3,3,3,3">
                                    <Label routeevt:ButtonTime.ReportTime="RptTime" x:Name="StyleWPF">Style的用法:</Label>
                                    <Button Style="{StaticResource BlueButton}" Margin="0,5">蓝色按钮</Button>
                                    <Button Style="{StaticResource ButtonTrigger}">蓝色按钮和触发事件</Button>
                                </StackPanel>
                            </Border>

                            <!-- WPF还支持画线，画图 -->
                            <Border Grid.Row="1" BorderBrush="Black" BorderThickness="1" Margin="0,5">
                                <StackPanel  Margin="3,3,3,3">
                                    <Label>用WPF画图</Label>
                                    <Canvas x:Name="canvas1"></Canvas>
                                </StackPanel>
                            </Border>

                            <!-- 使用controlTemplate组合一个控件出来 -->
                            <Border Grid.Row="2" BorderBrush="Black" BorderThickness="1" Margin="0,5">
                                <StackPanel>
                                    <Label>在前端直接用ControlTemplate组合用户控件</Label>
                                    <UserControl x:Name="uc" Template="{StaticResource cTmp}" Grid.Row="2"/>
                                </StackPanel>
                            </Border>

                            <!-- 可以使用Binding关联一个静态Source，既然是静态Source，Path就使用.来代替（因为不用指定属性） -->
                            <TextBox x:Name="tb" Text="{Binding Path=., Source={StaticResource ResourceKey=StaticStringResource}}"  Style="{StaticResource tbstyle}" Grid.Row="3"/>

                            <!-- 也可以使用Binding关联其他控件的属性 -->
                            <Border Grid.Row="4" BorderBrush="Black" BorderThickness="1" Margin="0,5">
                                <StackPanel>
                                    <Label>控件绑定前端元素：</Label>
                                    <!-- 在控件中具有DependencyProperty能力的属性，才可以支持将Binding实例赋值到这个属性上 -->
                                    <TextBox Text="{Binding ElementName=slider1, Path=Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                             Width="{Binding ElementName=slider1, Path=Width}"/>
                                    <TextBox Text="{Binding ElementName=slider1, Path=Width}"/>
                                    <Slider x:Name="slider1" Maximum="20" Width="150"/>
                                </StackPanel>
                            </Border>

                        </Grid>

                    </DockPanel>

                    <!-- 路由事件和依赖属性 -->
                    <DockPanel Grid.Column="1" x:Name="DockPanel_RouteEvent" routeevt:ButtonTime.ReportTime="RptTime">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="100"></RowDefinition>
                                <RowDefinition Height="150"></RowDefinition>
                                <RowDefinition Height="120"></RowDefinition>
                                <RowDefinition Height="100"></RowDefinition>
                                <RowDefinition Height="100"></RowDefinition>
                                <RowDefinition Height="100"></RowDefinition>
                            </Grid.RowDefinitions>

                            <!-- 路由事件和依赖属性都在这里 -->
                            <Grid x:Name="RouteEventGrid1" Grid.Row="0" routeevt:ButtonTime.ReportTime="RptTime">
                                
                                <StackPanel x:Name="sp1" routeevt:ButtonTime.ReportTime="RptTime">
                                    
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="40"></RowDefinition>
                                            <RowDefinition Height="40"></RowDefinition>
                                        </Grid.RowDefinitions>

                                        <!-- ！！不在timebutton的路由路径上，所以路由事件无法到达！！ -->
                                        <StackPanel x:Name="sp2" routeevt:ButtonTime.ReportTime="RptTime">
                                        </StackPanel>

                                        <!-- 从这里的一个按钮发送路由事件 -->
                                        <routeevt:ButtonTime x:Name="timebutton" Height="40" Grid.Row="1" Click="TimeButton_Click" routeevt:ButtonTime.ReportTime="Button_Click2">
                                            我是一个从Button继承带有路由事件的按钮
                                        </routeevt:ButtonTime>

                                    </Grid>

                                </StackPanel>
                            </Grid>

                            <!-- WPF中的命令系统 -->
                            <Grid Grid.Row="1" Margin="0,10">
                                <StackPanel x:Name="CommandStackPanel">
                                    <TextBox x:Name="CommandTextBox"></TextBox>
                                    <Button x:Name="CommandButton">
                                        <Label FontStyle="Oblique">清空命令(清空以上输入)</Label>
                                    </Button>
                                </StackPanel>
                            </Grid>
                            
                            <!-- WPF中的命令系统二 -->
                            <Grid Grid.Row="2" Margin="0,10">
                                <StackPanel x:Name="CommandStackPanel2">
                                    <TextBox x:Name="CommandTextBox2"></TextBox>
                                </StackPanel>
                            </Grid>

                            <Grid Grid.Row="3" Margin="0,10">
                            </Grid>
                            
                        </Grid>
                    </DockPanel>

                    <!-- 所有都是自定义控件，看看控件解耦和之后，如何处理控件之间的关系 -->
                    <DockPanel Grid.Column="2">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="100"></RowDefinition>
                                <RowDefinition Height="450"></RowDefinition>
                                <RowDefinition Height="100"></RowDefinition>
                                <RowDefinition Height="100"></RowDefinition>
                            </Grid.RowDefinitions>

                            <!-- 搜索TextBox，更新下边的TreeView -->
                            <Border BorderThickness="1" Grid.Row="0">
                                <Label FontSize="24" FontWeight="Bold">控件之间相互操作，解耦和方式1：</Label>
                            </Border>
                            <Border BorderThickness="1" Grid.Row="1" Margin="0,10,0,10">
                                <StackPanel>
                                    <localui:CLS_SearchTextBox x:Name="SearchTextBox" Margin="0,10,0,10"></localui:CLS_SearchTextBox>
                                    <localui:CLS_TreeView_ReadXML x:Name="SearchTreeView" Margin="0,10,0,10" Height="150"></localui:CLS_TreeView_ReadXML>
                                    <ListBox x:Name="SearchReslutListBox" Height="200">
                                        <ListBox.ItemTemplate>
                                            <HierarchicalDataTemplate DataType="{x:Type model:ListViewSearchResult}">
                                                <TextBlock Text="{Binding Path=m_ShowContent}"></TextBlock>
                                            </HierarchicalDataTemplate>
                                        </ListBox.ItemTemplate>
                                    </ListBox>
                                </StackPanel>
                            </Border>

                        </Grid>
                    </DockPanel>

                </Grid>
            </TabItem>

            <TabItem Header="Binding专用">

                <Grid>

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="350"/>
                        <ColumnDefinition Width="300"/>
                        <ColumnDefinition Width="300"/>
                        <ColumnDefinition Width="400"/>
                    </Grid.ColumnDefinitions>

                    <Grid Grid.Column="0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="50"></RowDefinition>
                            <RowDefinition Height="50"></RowDefinition>
                            <RowDefinition Height="50"></RowDefinition>
                            <RowDefinition Height="50"></RowDefinition>
                            <RowDefinition Height="50"></RowDefinition>
                            <RowDefinition Height="50"></RowDefinition>
                        </Grid.RowDefinitions>

                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="0">
                            <StackPanel>
                                <Label>有关于Binding的本质：</Label>
                                <Label x:Name="BindingBase"></Label>
                            </StackPanel>
                        </Border>

                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="1">
                            <StackPanel Orientation="Vertical">
                                <Label>利用DataContext来Binding关联：</Label>
                                <Label x:Name="BindingLabel" Content="{Binding Path=m_iA}"/>
                            </StackPanel>
                        </Border>

                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="2">
                            <StackPanel Orientation="Vertical">
                                <Label>利用DataContext来Binding关联（静态属性）：</Label>
                                <Label x:Name="BindingLabel2" Content="{Binding Path=m_sA}"/>
                            </StackPanel>
                        </Border>
                    </Grid>

                </Grid>
            </TabItem>

            <!-- 汇总各个控件的使用方法 -->
            <TabItem x:Name="AllControlUsage" Header="各类控件的使用">

                <Grid>
                    <!-- 总宽度1000 -->
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="200"/>
                        <ColumnDefinition Width="500"/>
                        <ColumnDefinition Width="500"/>
                        <ColumnDefinition Width="200"/>
                    </Grid.ColumnDefinitions>

                    <!-- 总高度800 -->
                    <Grid Grid.Column="0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="100"/>
                            <RowDefinition Height="150"/>
                            <RowDefinition Height="170"/>
                            <RowDefinition Height="200"/>
                            <RowDefinition Height="100"/>
                            <RowDefinition Height="100"/>
                        </Grid.RowDefinitions>

                        <!-- 
                            在此使用DataContext指定一个ClassA的一个实例，
                            并且在该区域内的所有控件都能访问这个类实例的属性 
                        -->
                        <Border  BorderBrush="Black" BorderThickness="1" Grid.Row="0" Margin="5,5,5,5">
                            <!-- 在Border范围内实例化了一个ClassA，名为class_a -->
                            <Border.DataContext>
                                <local:ClassA x:Name="class_a"></local:ClassA>
                            </Border.DataContext>

                            <!-- 指定了DataContext后，可以通过Binding的path关联实例对应的属性 -->
                            <TreeView Name="tree">
                                <TreeViewItem Header="Root">
                                    <TreeViewItem Header="{Binding Path = m_A}"></TreeViewItem>
                                    <TreeViewItem Header="{Binding m_B}"></TreeViewItem>
                                </TreeViewItem>
                            </TreeView>
                        </Border>

                        <!-- 有关于ItemsControl（ListBox）类型的控件，使用ItemSource进行Binding -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="1" Margin="5,5,5,5">
                            <StackPanel Margin="3,3,3,3">
                                <Label>绑定ItemControl类型的控件</Label>
                                <!-- 显示下边ListBox选择的PersonID -->
                                <TextBox x:Name="PersonID"></TextBox>
                                <!-- 关联ItemSource为一个List<person>容器的列表 -->
                                <ListBox x:Name="PersonList" Margin="0,5">
                                    <ListBox.ItemTemplate>
                                        <DataTemplate>
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock Text="{Binding Path=m_ID}" Width="30"/>
                                                <TextBlock Text="{Binding Path=m_Name}" Width="60"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>
                                </ListBox>
                            </StackPanel>
                        </Border>

                        <!-- 有关于ItemsControl（ListBox）类型的控件，使用ItemSource进行Binding -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="2" Margin="5,5,5,5">
                            <StackPanel Margin="3,3,3,3">
                                <Label>绑定ItemControl类型的控件</Label>
                                <!-- 显示下边ListBox选择的PersonID -->
                                <TextBox Text ="{Binding m_ID}"></TextBox>
                                <!-- 关联ItemSource为一个List<person>容器的列表 -->
                                <ListBox x:Name="PersonList2" Margin="0,5" ItemsSource="{Binding Path=.}"></ListBox>
                            </StackPanel>
                        </Border>

                        <!-- 有关于ItemsControl(ListBox)控件，使用一个List<Person>绑定 -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="3" Margin="5,5,5,5" >
                            <StackPanel>
                                <!-- 
                                     每个控件都有自己的DataContext
                                     DataContext可以指定为某一个区域 
                                     这样使用DataContext，也相当于实例化了一个Student对象
                                -->
                                <StackPanel.DataContext>
                                    <local:Student x:Name="stus"></local:Student>
                                </StackPanel.DataContext>
                                <ListBox x:Name="StuList" ItemsSource="{Binding m_StuList}" DisplayMemberPath="m_Name">
                                </ListBox>

                                <!-- 这个就是单纯的想看看ListBox的叶子节点到底存在了ListBox的哪个属性里 -->
                                <!-- 事实证明保存在了LogicalChildren当中 -->
                                <ListBox x:Name="StuList2">
                                    <Label>123</Label>
                                    <ListBoxItem>
                                        <Button>BTN</Button>
                                    </ListBoxItem>
                                    <StackPanel></StackPanel>
                                </ListBox>
                            </StackPanel>
                        </Border>

                        <!-- 一个实时更新的输入框，绑定函数返回值的例子 -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="4" Margin="5,5,5,5" >
                            <StackPanel>
                                <TextBox x:Name="CalcX"></TextBox>
                                <TextBox x:Name="CalcY"></TextBox>
                                <TextBox x:Name="CalcRes"></TextBox>
                            </StackPanel>
                        </Border>

                        <!-- 这个是学习依赖属性用的，DP暂时没学透彻呢 -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="5" Margin="5,5,5,5">
                            <StackPanel>
                                <TextBox x:Name="text1"></TextBox>
                                <Button x:Name="GetInputButton" Content="获取输入框内容" Click="GetDepProperty" ></Button>
                            </StackPanel>
                        </Border>

                    </Grid>

                    <!-- 这一列涉及控件DataGrid的使用方法 -->
                    <Grid Grid.Column="1">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="100"/>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="100"/>
                            <RowDefinition Height="50"/>
                            <RowDefinition Height="120"/>
                            <RowDefinition Height="120"/>
                            <RowDefinition Height="150"/>
                            <RowDefinition Height="150"/>
                        </Grid.RowDefinitions>

                        <Label Grid.Row="0">这是一个DataGrid最基础的实例</Label>
                        <!-- 在MSDN中，一个最为基础的DataGrid的使用方法 -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="1" Margin="5,5,5,5">
                            <DataGrid x:Name="CustomerDataGrid" ItemsSource="{Binding Path = .}" AutoGenerateColumns="False"  >
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Column1"  Binding="{Binding FirstName}"/>
                                    <DataGridTextColumn Header="Column2" Binding="{Binding LastName}" />
                                    <DataGridHyperlinkColumn Header="Column3" Binding="{Binding Email}"  />
                                    <DataGridCheckBoxColumn Header="Column4" Binding="{Binding IsMember}" />
                                    <DataGridTextColumn Header="Column5" Binding="{Binding cell.name}" />
                                </DataGrid.Columns>
                            </DataGrid>
                        </Border>

                        <Label Grid.Row="2">这是一个带有多个事件的DataGrid</Label>
                        <!-- 对DataGrid进行更加丰富的操作，比如单元格编辑事件等等 -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="3" Margin="5,5,5,5">
                            <DataGrid x:Name="CustomerDataGrid_AddEvent" ItemsSource="{Binding Path = .}" AutoGenerateColumns="False" SelectionUnit="Cell" SelectionMode="Single">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Column1"  Binding="{Binding column1.name}"/>
                                    <DataGridHyperlinkColumn Header="Column2" Binding="{Binding column2.name}"  />
                                    <DataGridCheckBoxColumn Header="Column3" Binding="{Binding column3.name}" />
                                </DataGrid.Columns>
                            </DataGrid>
                        </Border>

                        <!-- 触发单元格自动刷新 -->
                        <StackPanel Grid.Row="4">
                            <Label>以下使用了数据模板为DataGrid丰富内容，并实现自动刷新功能</Label>
                            <Button Click="Button_Click">开始刷新DataGrid</Button>
                        </StackPanel>

                        <!-- 使用DataTemplate对.NET自带的DataGrid进行定制化 -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="5" Margin="5,5,5,5">
                            <!-- 一个数据模板，使用在后边DataGrid的最后一个单元格 -->
                            <Border.Resources>
                                <DataTemplate x:Key="cellEditingTemplate" DataType="{x:Type model:MessageModel}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition/>
                                            <ColumnDefinition Width="15"/>
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Grid.Column="0" Text="{Binding m_content}"/>
                                        <Button Grid.Column="1" Content="..." Command="{Binding ShowCommand}"/>
                                    </Grid>
                                </DataTemplate>

                                <!-- 数据模板对应的类型是MessageModel -->
                                <DataTemplate x:Key="cellDropBox" DataType="{x:Type model:MessageModel}">
                                    <ComboBox ItemsSource="{Binding m_content_detail}" SelectedIndex="0" />
                                </DataTemplate>

                                <DataTemplate x:Key="cellTextBlock" DataType="{x:Type model:MessageModel}">
                                    <TextBlock Text="{Binding m_content_detail}" />
                                </DataTemplate>

                            </Border.Resources>

                            <!-- 表格，用来显示MessageVM中所有的消息,使用ItemsSource指定数据源 -->
                            <DataGrid AutoGenerateColumns="False" x:Name="MsgDataGrid" ItemsSource="{Binding Path=.}">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="编号" Binding="{Binding m_No}"/>
                                    <DataGridTextColumn Header="时间戳" Binding="{Binding m_time}"/>
                                    <DataGridTemplateColumn Header="消息内容" CellTemplate="{StaticResource ResourceKey = cellEditingTemplate}" 
                                                            CellEditingTemplate="{StaticResource ResourceKey = cellEditingTemplate}"/>
                                    <DataGridTemplateColumn Header="消息详情" CellTemplate="{StaticResource ResourceKey=cellDropBox}"/>
                                </DataGrid.Columns>
                            </DataGrid>
                        </Border>

                        <!-- 表格，和上边的表格一样，但是只是应用了usercontrol封装了一下 -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="6" Margin="5,5,5,5">
                            <localui:MessageDataGrid x:Name="MsgDataGrid2"></localui:MessageDataGrid>
                        </Border>

                        <!-- 
                             这是一个使用Dynamic动态类型关联的DataGrid，
                             这样一来，如果有非常多的同类型的表格，就不用为每个表格再去手工建立数据模型了
                        -->
                        <Border BorderBrush="Black" BorderThickness="1" Grid.Row="7" Margin="5,5,5,5">
                            <DataGrid AutoGenerateColumns="False" x:Name="MsgDataGrid_AutoGenCol"/>
                        </Border>

                        <!-- 一个用于接收DataGrid空间拖拽事件的实验控件 -->
                        <ScrollViewer Grid.Row="8">
                            <Label x:Name="ReceiveDataLabel" Content="在此接收DataGrid拖拽过来的数值"></Label>
                        </ScrollViewer>

                    </Grid>

                    <!-- !!综合使用,比较实用!!DataGrid的应用实例 -->
                    <Grid Grid.Column="2">

                        <Grid.RowDefinitions>
                            <RowDefinition Height="200"></RowDefinition>
                            <RowDefinition Height="200"></RowDefinition>
                            <RowDefinition Height="200"></RowDefinition>
                            <RowDefinition Height="50"></RowDefinition>
                        </Grid.RowDefinitions>
                        <!-- 
                            Dynamic类型绑定DataGrid的同时，丰富单元格内显示类型
                        -->
                        <DataGrid Grid.Row="0" AutoGenerateColumns="False" SelectionMode="Single" x:Name="MsgDataGrid_AutoGenColandCellMore" 
                                  ItemsSource="{Binding Path=.}" SelectionUnit="Cell"/>

                        <!--
                            将Dynamic动态表封装成用户控件
                        -->
                        <localui:DyDataGrid x:Name="DynamicDataGrid" Grid.Row="1" ></localui:DyDataGrid>

                        <ScrollViewer Grid.Row="3">
                            <Label x:Name="ReceiveDataLabel2" Content="在此接收DataGrid拖拽过来的数值"></Label>
                        </ScrollViewer>

                    </Grid>

                    <!-- 这一列涉及TreeView控件的使用 -->
                    <Grid Grid.Column="3">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="100"/>
                            <RowDefinition Height="150"/>
                            <RowDefinition Height="50"/>
                            <RowDefinition Height="50"/>
                            <RowDefinition Height="150"/>
                            <RowDefinition Height="150"/>
                        </Grid.RowDefinitions>

                        <!-- 通过组合模式实现的树形结构 -->
                        <ScrollViewer Grid.Row="0">
                            <StackPanel>
                                <Label>一个树形结构的类型容器，关联放入Treeview当中</Label>
                                <TreeView x:Name="tv_composite">
                                    <TreeView.ItemTemplate>
                                        <HierarchicalDataTemplate DataType="{x:Type model:TreeViewComposite}" ItemsSource="{Binding m_SubList}" >
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock VerticalAlignment="Center" Text="{Binding m_ItemName}"></TextBlock>
                                            </StackPanel>
                                        </HierarchicalDataTemplate>
                                    </TreeView.ItemTemplate>
                                </TreeView>
                            </StackPanel>
                        </ScrollViewer>

                        <!-- 简单的通过读取Resourcees中的静态XML格式的树形结构 -->
                        <ScrollViewer Grid.Row="1">
                            <StackPanel>
                                <Label>静态XML数据，放入Treeview当中</Label>
                                <TreeView ItemsSource="{Binding Source={StaticResource xdp}}">
                                    <TreeView.ItemTemplate>
                                        <HierarchicalDataTemplate ItemsSource="{Binding XPath=Folder}">
                                            <TextBlock Text="{Binding XPath=@Name}"/>
                                        </HierarchicalDataTemplate>
                                    </TreeView.ItemTemplate>
                                </TreeView>
                            </StackPanel>
                        </ScrollViewer>

                        <Button Content="Start Parse XML" Click="StartParseXML" Grid.Row="2" Margin="0,10"></Button>

                        <!-- 通过读取XML文件来填写属性结构的模板 -->
                        <ScrollViewer Grid.Row="4">
                            <TreeView x:Name="TreeViewReadFromXMLFile">
                                <TreeView.ItemTemplate>
                                    <HierarchicalDataTemplate DataType="{x:Type model:TreeViewComposite}" ItemsSource="{Binding m_SubList}">
                                        <StackPanel>
                                            <TextBlock Text="{Binding m_ItemName}"></TextBlock>
                                        </StackPanel>
                                    </HierarchicalDataTemplate>
                                </TreeView.ItemTemplate>
                            </TreeView>
                        </ScrollViewer>

                        <ListBox x:Name="SearchRes" Grid.Row="5"></ListBox>

                    </Grid>
                </Grid>
            </TabItem>


            <TabItem Header="小实验">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="200"></ColumnDefinition>
                        <ColumnDefinition></ColumnDefinition>
                        <ColumnDefinition></ColumnDefinition>
                        <ColumnDefinition></ColumnDefinition>
                    </Grid.ColumnDefinitions>

                    <Grid Grid.Column="0">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="200"></RowDefinition>
                                <RowDefinition Height="200"></RowDefinition>
                                <RowDefinition Height="200"></RowDefinition>
                                <RowDefinition Height="200"></RowDefinition>
                            </Grid.RowDefinitions>

                            <!---->
                            <Border Grid.Row="0">
                                <StackPanel>
                                    <Button Content="触发接口IEnumerable的实验程序" Click="TryEnumerable"></Button>
                                </StackPanel>
                            </Border>
                        
                            <!-- 一个使用线程池特性BackgroundWorkder执行的进度条处理 -->
                            <Border Grid.Row="1">
                                <StackPanel>
                                    <ProgressBar x:Name="psb" Style="{DynamicResource ProgressBarStyle1}"></ProgressBar>
                                    <Button Content="开始异步处理" Click="StartBackgroundProgress" Margin="0,10"></Button>
                                    <Button Content="停止异步处理" Click="StopBackgroundProgress"></Button>
                                </StackPanel>
                            </Border>

                            <Border Grid.Row="2">
                                <StackPanel>
                                    <Label x:Name="time_span_second">0</Label>
                                    <Button Content="开始计时" x:Name="Time_Span_Button" Click="TimeTick"></Button>
                                </StackPanel>
                            </Border>

                        </Grid>

                    </Grid>
                </Grid>
            </TabItem>
            
            <TabItem Header="接口测试">
                <Grid x:Name="Interface_Grid">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="29"></ColumnDefinition>
                        <ColumnDefinition Width="171"/>
                        <ColumnDefinition></ColumnDefinition>
                        <ColumnDefinition></ColumnDefinition>
                        <ColumnDefinition></ColumnDefinition>
                    </Grid.ColumnDefinitions>

                    <Grid Grid.Column="0" Grid.ColumnSpan="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="200"></RowDefinition>
                            <RowDefinition Height="200"></RowDefinition>
                            <RowDefinition Height="200"></RowDefinition>
                            <RowDefinition Height="200"></RowDefinition>
                        </Grid.RowDefinitions>

                        <Border Grid.Row="0">
                            <StackPanel>
                                <Label>IEquatable:</Label>
                                <Button Click="StartEquatable_1">比较两个值—没有继承IEquatable时</Button>
                                <Button Click="StartEquatable_2">比较两个值—重载GetHashCode</Button>
                                <Button Click="StartEquatable_3">比较两个值—继承IEquatable</Button>
                                <Button Click="StartEquatable_4">用ICompare作为函数入参</Button>
                            </StackPanel>
                        </Border>

                        <Border Grid.Row="1">
                            <StackPanel>
                                <Label>IEnumerable</Label>
                                <Button Click="StartForeach_1">开始迭代</Button>
                            </StackPanel>
                        </Border>
                    </Grid>

                </Grid>


            </TabItem>


        </TabControl>


    </Grid>
</Window>
